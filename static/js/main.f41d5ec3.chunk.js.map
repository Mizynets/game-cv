{"version":3,"sources":["container/GamePage/index.module.css","components/LeaderList/index.module.css","components/LeaderListItem/index.module.css","components/GameInterface/index.module.css","components/FieldList/index.module.css","components/FieldList/FieldList.js","components/GameInterface/GameInterface.js","components/LeaderListItem/LeaderListItem.js","components/LeaderList/LeaderList.js","components/LeaderBoard/LeaderBoard.js","container/GamePage/GamePage.js","App.js","serviceWorker.js","reduxStore/reducer.js","reduxStore/store.js","index.js"],"names":["module","exports","FieldList","createClasses","selectValue","fieldSizeList","s","item_basis_5","item_basis_10","item_basis_15","this","props","propertiesList","isUserSelected","isSelected","isComputerSelected","selectedUser","classes","listItem","map","el","indx","onClick","data-id","key","uid","className","item","style","background","fieldList","list","Component","GameInterface","inputName","handleChangeSelect","handleChangeInputName","onHandlePlay","gameMode","startGame","winnerMassage","buttonValue","disabledBtn","trim","length","gameInterface","actionBlock","select","value","onChange","disabled","defaultValue","easyMode","field","normalMode","hardMode","type","placeholder","btn","message","messageText","LeaderListItem","name","date","leaderListItem","itemText","LeaderList","leaderList","title","LeaderBoard","GamePage","state","winner","gameOver","randomArr","propertiesItemArr","resetGame","leader","i","createItemPropertiesArr","arrProperties","Array","Math","pow","fill","id","isCurrentUserSelected","setState","componentDidMount","componentDidUpdate","_","prevState","e","target","delay","getDelay","len","getRandomArr","setTimeout","selectedCell","isCurrentUserSelectedChecker","isComputerSelectedChecker","isSelectedChecker","createLeaderList","leaderTemp","JSON","stringify","Date","toLocaleString","prevProps","modeValue","arrLength","array","sort","random","stopGame","winUser","filter","winComputer","floor","cloneArr","timer","selectedComputer","selectedItemID","currentTarget","dataset","findIndex","clearTimeout","selectedIndex","gamePagePosition","gamePage","leaderBoard","connect","App","Boolean","window","location","hostname","match","initialState","reducer","payload","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f41d5ec3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"gamePagePosition\":\"GamePage_gamePagePosition__13VaL\",\"spinner\":\"GamePage_spinner__3G2Yd\",\"gamePage\":\"GamePage_gamePage__1yoyw\",\"gameInterface\":\"GamePage_gameInterface__Ka0EQ\",\"leaderBoard\":\"GamePage_leaderBoard__VTxxC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"leaderList\":\"LeaderList_leaderList__1k4Gt\",\"list\":\"LeaderList_list__1KDY6\",\"item\":\"LeaderList_item__1y4ml\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"leaderListItem\":\"LeaderListItem_leaderListItem__3y3p9\",\"itemText\":\"LeaderListItem_itemText__sTlES\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameInterface\":\"GameInterface_gameInterface__2W9tQ\",\"actionBlock\":\"GameInterface_actionBlock__35GaG\",\"select\":\"GameInterface_select__ukiwN\",\"inputName\":\"GameInterface_inputName__2ImRj\",\"btn\":\"GameInterface_btn__1hbj5\",\"messageText\":\"GameInterface_messageText__2z5Tu\",\"message\":\"GameInterface_message__2Dxwc\",\"fieldList\":\"GameInterface_fieldList__zWYFc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"FieldList_list__uGVpN\",\"initialItem\":\"FieldList_initialItem__1fLL8\",\"item\":\"FieldList_item__2CR7F\",\"item_basis_5\":\"FieldList_item_basis_5__3caem\",\"item_basis_10\":\"FieldList_item_basis_10__3WVTf\",\"item_basis_15\":\"FieldList_item_basis_15__1Ttj9\"};","import React, { Component } from \"react\";\r\nimport s from \"./index.module.css\";\r\nimport uid from \"uid\";\r\n\r\nclass FieldList extends Component {\r\n  \r\n  createClasses = (selectValue) => {\r\n    const fieldSizeList = +selectValue;\r\n    return fieldSizeList === 5\r\n        ? `${s.item_basis_5}`\r\n        : fieldSizeList === 10\r\n        ? `${s.item_basis_10}`\r\n        : fieldSizeList === 15\r\n        ? `${s.item_basis_15}`\r\n        : null;\r\n  } \r\n\r\nrender() {\r\n    const {\r\n      propertiesList,\r\n      selectValue,\r\n      isUserSelected,\r\n      isSelected,\r\n      isComputerSelected,\r\n      selectedUser,\r\n    } = this.props;\r\n\r\n    \r\n    const classes = this.createClasses(selectValue);\r\n\r\n    const listItem = (\r\n      propertiesList.map((el, indx) => {\r\n        return (\r\n          <li\r\n            onClick={selectedUser}\r\n            data-id={indx}\r\n            key={uid()}\r\n            className={`${s.item} ${classes}`}\r\n            style={{\r\n              background: isUserSelected(el)\r\n                ? \"forestgreen\"\r\n                : isComputerSelected(el)\r\n                ? \"red\"\r\n                : isSelected(el)\r\n                ? \"gray\"\r\n                : \"white\"\r\n            }}\r\n          >\r\n          </li>\r\n        );\r\n      })\r\n    ) \r\n\r\n    return (\r\n      <div className={s.fieldList}>\r\n        <ul className={s.list}>{listItem}</ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FieldList;\r\n","import React, { Component } from \"react\";\r\nimport s from \"./index.module.css\";\r\nimport FieldList from \"../FieldList\";\r\n\r\nclass GameInterface extends Component {\r\n  render() {\r\n    const {\r\n      selectValue,\r\n      propertiesList,\r\n      inputName,\r\n      handleChangeSelect,\r\n      handleChangeInputName,\r\n      onHandlePlay,\r\n      gameMode,\r\n      startGame,\r\n      isUserSelected,\r\n      isSelected,\r\n      isComputerSelected,\r\n      selectedUser,\r\n      winnerMassage,\r\n      buttonValue\r\n    } = this.props;\r\n    \r\n    const disabledBtn = (!(+selectValue > 0 && inputName.trim().length > 0)) || (!(!(+selectValue > 0 && inputName.trim().length > 0)) && startGame);\r\n    return (\r\n      <div className={s.gameInterface}>\r\n        <div className={s.actionBlock}>\r\n          <select\r\n            className={s.select}\r\n            value={selectValue}\r\n            onChange={handleChangeSelect}\r\n            disabled={startGame}\r\n          >\r\n            <option defaultValue>Pick game mode</option>\r\n            <option value={gameMode.easyMode.field}>Easy Mode</option>\r\n            <option value={gameMode.normalMode.field}>Normal Mode</option>\r\n            <option value={gameMode.hardMode.field}>Hard Mode</option>\r\n          </select>\r\n          <input\r\n            className={s.inputName}\r\n            type=\"text\"\r\n            placeholder=\"Enter your name\"\r\n            value={inputName}\r\n            onChange={handleChangeInputName}\r\n            disabled={startGame}\r\n          />\r\n          <button\r\n            disabled={disabledBtn}\r\n            className={s.btn}\r\n            onClick={onHandlePlay}\r\n          >\r\n            {buttonValue}\r\n          </button>\r\n        </div>\r\n\r\n        <div className={s.message}>\r\n          <p className={s.messageText}>{winnerMassage}</p>\r\n        </div>\r\n\r\n        <div className={s.fieldList}>\r\n          <FieldList\r\n            propertiesList={propertiesList}\r\n            selectValue={selectValue}\r\n            isUserSelected={isUserSelected}\r\n            isSelected={isSelected}\r\n            isComputerSelected={isComputerSelected}\r\n            selectedUser={selectedUser}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GameInterface;\r\n","import React from 'react';\r\nimport s from './index.module.css';\r\n\r\nconst LeaderListItem = ({name, date}) => {\r\n    return(\r\n        <div className={s.leaderListItem}>\r\n            <span className={s.itemText}>{name}</span>\r\n            <span className={s.itemText}>{date}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LeaderListItem;","import React from 'react';\r\nimport s from './index.module.css';\r\nimport LeaderListItem from '../LeaderListItem';\r\nimport uid from \"uid\";\r\n\r\nconst LeaderList = ({list}) => {\r\n\r\n    const leaderList = list.length\r\n    ? list.map(el => {\r\n        const { name, date } = el\r\n        return <li key={uid()} className={s.item}><LeaderListItem name={name} date={date}/></li>\r\n    }) \r\n    : []\r\n  \r\n    return(\r\n        <div className={s.leaderList}>\r\n            <h2 className={s.title} >Leader Board</h2>\r\n            <ul className={s.list}>\r\n                 {leaderList}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LeaderList;","import React from 'react';\r\nimport s from './index.module.css';\r\nimport LeaderList from '../LeaderList';\r\n\r\nconst LeaderBoard = ({list}) => {\r\n    return(\r\n        <div className={s.LeaderBoard}>\r\n            <LeaderList list={list} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LeaderBoard;","// comments area is logic for server\r\n\r\nimport React, { Component } from \"react\";\r\nimport s from \"./index.module.css\";\r\nimport GameInterface from \"../../components/GameInterface/GameInterface\";\r\nimport LeaderBoard from \"../../components/LeaderBoard\";\r\nimport { connect } from \"react-redux\";\r\n// import { thunkCreaterGetModes, thunkCreaterPostWinner } from \"../../reduxStore/actionCreater\";\r\nimport uid from \"uid\";\r\n// import Spinner from \"../../components/UI/Spinner\";\r\n\r\n\r\nclass GamePage extends Component {\r\n  state = {\r\n    inputName: \"\",\r\n    selectValue: \"\",\r\n    winner: \"\",\r\n    startGame: false,\r\n    gameOver: false,\r\n    randomArr: null,\r\n    propertiesItemArr: [],\r\n    resetGame: false,\r\n    leader: [],\r\n  };\r\n  \r\n  i = 0;\r\n  timer;\r\n  timerStartSelected;\r\n\r\n  createItemPropertiesArr = () => {\r\n    const { selectValue } = this.state;\r\n    const fieldSizeList = +selectValue;\r\n   \r\n    const arrProperties = fieldSizeList\r\n      ? Array(Math.pow(fieldSizeList, 2))\r\n          .fill()\r\n          .map(() => ({\r\n            id: uid(),\r\n            isSelected: false,\r\n            isCurrentUserSelected: false,\r\n            isComputerSelected: false\r\n          }))\r\n      : [];\r\n\r\n    this.setState({\r\n      propertiesItemArr: arrProperties\r\n    });\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    // const { thunkCreaterGetModes } = this.props;\r\n    // thunkCreaterGetModes();\r\n    this.createItemPropertiesArr();\r\n  };\r\n\r\n  componentDidUpdate = (_, prevState) => {\r\n    if (prevState.selectValue !== this.state.selectValue) {\r\n      this.createItemPropertiesArr();\r\n    } else if (prevState.gameOver !== this.state.gameOver) {\r\n      this.setState({\r\n        resetGame: true\r\n      });\r\n    }\r\n  };\r\n\r\n  handleChangeInputName = e =>\r\n    this.setState({\r\n      inputName: e.target.value\r\n    });\r\n\r\n  handleChangeSelect = e =>\r\n    this.setState({\r\n      selectValue: e.target.value\r\n    });\r\n\r\n  onHandlePlay = () => {\r\n    const { resetGame, gameOver, selectValue } = this.state;\r\n    if (resetGame) {\r\n      this.i = 0;\r\n      this.setState(\r\n        {\r\n          inputName: \"\",\r\n          selectValue: \"\",\r\n          gameOver: false,\r\n          randomArr: null,\r\n          propertiesItemArr: [],\r\n          resetGame: false,\r\n          startGame: false,\r\n        })\r\n      \r\n    }\r\n    if (!gameOver) {\r\n    this.setState({startGame: true})    \r\n\r\n        const delay = this.getDelay(selectValue);\r\n        const len = Math.pow(+selectValue, 2);\r\n        this.getRandomArr(len);\r\n        setTimeout(this.selectedCell, delay);\r\n    }\r\n  };\r\n\r\n  isCurrentUserSelectedChecker = item => item.isCurrentUserSelected;\r\n  isComputerSelectedChecker = item => item.isComputerSelected;\r\n  isSelectedChecker = item => item.isSelected;\r\n\r\n  createLeaderList = () => {\r\n    const { winner } = this.state;\r\n    const obj = {\r\n        name: winner,\r\n        date: JSON.stringify(new Date().toLocaleString()),\r\n    }\r\n    const leaderTemp = [obj];\r\n\r\n    this.setState((prevProps) => {\r\n      return{\r\n        leader: [...leaderTemp, ...prevProps.leader],\r\n      }\r\n    })\r\n}\r\n\r\n  getDelay = (selectValue) => {\r\n    const { gameMode } = this.props;\r\n    const modeValue = +selectValue;\r\n\r\n    return  modeValue === 5\r\n        ? gameMode.easyMode.delay\r\n        : modeValue === 10\r\n        ? gameMode.normalMode.delay\r\n        : modeValue === 15\r\n        ? gameMode.hardMode.delay\r\n        : null;\r\n  }\r\n\r\n  getRandomArr = arrLength => {\r\n    const { randomArr } = this.state;\r\n    const array = Array(arrLength)\r\n      .fill()\r\n      .map((_, i) => i);\r\n    if (!randomArr) {\r\n      this.setState({\r\n        randomArr: array.sort(() => Math.random() - 0.5),\r\n      });\r\n    }\r\n  };\r\n\r\n  stopGame = () => {\r\n    const { propertiesItemArr, inputName } = this.state;\r\n\r\n    const winUser = propertiesItemArr.filter(el => el.isCurrentUserSelected);\r\n    const winComputer = propertiesItemArr.filter(el => el.isComputerSelected);\r\n    \r\n    let winner = null;\r\n    let gameOver = false;\r\n    \r\n    if (winUser.length > Math.floor(propertiesItemArr.length / 2)) {\r\n      winner = inputName;\r\n      gameOver = true;\r\n    }\r\n    else if (winComputer.length > Math.floor(propertiesItemArr.length / 2)){\r\n      winner = \"computer\";\r\n      gameOver = true\r\n    }\r\n    \r\n   gameOver && this.setState({\r\n        gameOver: gameOver,\r\n        winner: winner,\r\n        startGame: false,\r\n      });\r\n  };\r\n\r\n  selectedCell = () => {\r\n    const { propertiesItemArr, randomArr, selectValue, gameOver } = this.state;\r\n    this.stopGame();\r\n    if (!gameOver) {\r\n      const delay = this.getDelay(selectValue);\r\n      const cloneArr = [...propertiesItemArr];\r\n      const ind = this.i++;\r\n      cloneArr[randomArr[ind]].isSelected = true;\r\n      this.setState({\r\n        propertiesItemArr: cloneArr\r\n      });\r\n      this.timer = setTimeout(this.selectedComputer, delay);\r\n    }\r\n  };\r\n\r\n  selectedUser = e => {\r\n    const { propertiesItemArr, selectValue, gameOver } = this.state;\r\n    this.stopGame();\r\n    if (!gameOver) {\r\n    const delay = this.getDelay(selectValue); \r\n    const selectedItemID = e.currentTarget.dataset.id;\r\n    const cloneArr = [...propertiesItemArr];\r\n\r\n    const selectedIndex = cloneArr.findIndex(\r\n      e => e.isSelected && !e.isCurrentUserSelected && !e.isComputerSelected\r\n    );\r\n\r\n    if(selectedIndex === +selectedItemID){\r\n    clearTimeout(this.timer);\r\n      cloneArr[selectedItemID].isCurrentUserSelected = true;\r\n      this.setState({\r\n        propertiesItemArr: cloneArr\r\n      });\r\n      setTimeout(this.selectedCell, delay);\r\n    } \r\n    }  \r\n  };\r\n\r\n  selectedComputer = () => {\r\n\r\n    // const { propertiesItemArr, selectValue, gameOver, inputName, winner } = this.state;\r\n    const { propertiesItemArr, selectValue, gameOver } = this.state;\r\n    // const { thunkCreaterPostWinner } = this.props;\r\n    this.stopGame();\r\n    \r\n    if (gameOver) {\r\n      this.createLeaderList();\r\n      // winner === inputName \r\n      // ? thunkCreaterPostWinner(JSON.stringify({winner: inputName, data: new Date()}))    \r\n      // : thunkCreaterPostWinner(JSON.stringify({winner: \"computer\", data: new Date()}));\r\n    }\r\n    const delay = this.getDelay(selectValue);\r\n    const cloneArr = [...propertiesItemArr];\r\n    const selectedIndex = cloneArr.findIndex(\r\n      e => e.isSelected && !e.isCurrentUserSelected && !e.isComputerSelected\r\n    );\r\n    cloneArr[selectedIndex].isComputerSelected = true;\r\n    this.setState({\r\n      propertiesItemArr: cloneArr\r\n    });\r\n    setTimeout(this.selectedCell, delay);\r\n      \r\n  };\r\n\r\n  render() {\r\n    const {\r\n      inputName,\r\n      selectValue,\r\n      startGame,\r\n      propertiesItemArr,\r\n      gameOver,\r\n      leader,\r\n    } = this.state;\r\n    const { gameMode } = this.props;\r\n\r\n    // if (loading) {\r\n    //   return <div className={s.spinner}>\r\n    //     <Spinner />\r\n    //   </div>\r\n    // }\r\n\r\n    const winUser = propertiesItemArr.filter(el => el.isCurrentUserSelected);\r\n    const winComputer = propertiesItemArr.filter(el => el.isComputerSelected);\r\n\r\n    const winnerMassage =\r\n      winUser.length > Math.floor(propertiesItemArr.length / 2)\r\n        ? `${inputName} Win`\r\n        : winComputer.length > Math.floor(propertiesItemArr.length / 2)\r\n        ? `Computer Win`\r\n        : (propertiesItemArr.length === 0 || inputName.length === 0)\r\n        ? `Inputs should be full`\r\n        : `Game`\r\n\r\n    const buttonValue = gameOver ? \"PLAY AGAIN\" : \"PLAY\";\r\n\r\n    return (\r\n      <div className={s.gamePagePosition}>\r\n        <div className={s.gamePage}>\r\n          <div className={s.gameInterface}>\r\n            <GameInterface\r\n              inputName={inputName}\r\n              propertiesList={propertiesItemArr}\r\n              selectValue={selectValue}\r\n              gameMode={gameMode}\r\n              handleChangeSelect={this.handleChangeSelect}\r\n              handleChangeInputName={this.handleChangeInputName}\r\n              onHandlePlay={this.onHandlePlay}\r\n              startGame={startGame}\r\n              isUserSelected={this.isCurrentUserSelectedChecker}\r\n              isSelected={this.isSelectedChecker}\r\n              isComputerSelected={this.isComputerSelectedChecker}\r\n              selectedUser={this.selectedUser}\r\n              winnerMassage={winnerMassage}\r\n              buttonValue={buttonValue}\r\n            />\r\n          </div>\r\n          <div className={s.leaderBoard}>\r\n            <LeaderBoard\r\n              list={leader}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n// const mapStateToProps = ({ loading, gameMode }) => {\r\n//   return {\r\n//     loading,\r\n//     gameMode\r\n//   };\r\n// };\r\n\r\n\r\nconst mapStateToProps = ({ gameMode }) => {\r\n  return {\r\n    gameMode\r\n  };\r\n};\r\n\r\n// const mapDispatchToProps = {\r\n//   thunkCreaterGetModes,\r\n//   thunkCreaterPostWinner\r\n// };\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  // mapDispatchToProps\r\n  null\r\n)(GamePage);\r\n","import React from \"react\";\r\nimport GamePage from \"./container/GamePage/GamePage\";\r\n\r\nconst App = () => {\r\n    return <GamePage />;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","// comments area is logic for server\r\n\r\n// import { FETCH_MODES, FETCH_LOADED, FETCH_ERROR,POST_WINNER } from \"./constants\";\r\n\r\n// const initialState = {\r\n//   gameMode: null,\r\n//   loading: true,\r\n//   err: null,\r\n// };\r\n\r\nconst initialState = {\r\n  gameMode: {\r\n    easyMode:{\"field\":5,\"delay\":2000},\r\n    normalMode:{\"field\":10,\"delay\":1000},\r\n    hardMode:{\"field\":15,\"delay\":900}\r\n  }\r\n};\r\n\r\nconst reducer = (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    // case FETCH_LOADED:\r\n    //   return {\r\n    //     ...state,\r\n    //     loading: true\r\n    //   };\r\n\r\n    // case FETCH_ERROR:\r\n    //   return {\r\n    //     gameMode: null,\r\n    //     loading: false,\r\n    //     err: payload\r\n    //   };\r\n\r\n    // case FETCH_MODES:\r\n    //   return {\r\n    //     ...state,\r\n    //     gameMode: payload,\r\n    //     loading: false,\r\n    //   };\r\n\r\n    //   case POST_WINNER:\r\n    //     return {\r\n    //       ...state,\r\n    //       loading: false,\r\n    //     }\r\n  \r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","// comments area is logic for server\r\n\r\nimport { createStore, applyMiddleware } from 'redux';\r\n// import thunk from 'redux-thunk';\r\nimport reducer from './reducer';\r\n\r\n// const store = createStore(reducer, applyMiddleware(thunk));\r\nconst store = createStore(reducer);\r\n\r\n\r\nexport default store;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./reduxStore/store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}